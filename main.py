import os
import requests
from fastapi import FastAPI, Response
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import warnings
import pytz
import re

# ÂøΩÁï• InsecureRequestWarning Ë≠¶Âëä
from urllib3.exceptions import InsecureRequestWarning
warnings.simplefilter('ignore', InsecureRequestWarning)

# ÂàùÂßãÂåñ FastAPI ÊáâÁî®
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==============================================================================
# ===== ‚ú® Ë´ãÂÜçÊ¨°Á¢∫Ë™çÊÇ®Â∑≤Â°´ÂÖ•Ê≠£Á¢∫ÁöÑ TDX ÈáëÈë∞ ‚ú® =====
# ==============================================================================
TDX_APP_ID = "t1190t-cb75f4a4-e514-489f"
TDX_APP_KEY = "dc00bc01-dff4-47cb-97f4-88fec81e69cc"
# ==============================================================================

CWA_API_KEY = os.environ.get('CWA_API_KEY', 'CWA-B3D5458A-4530-4045-A702-27A786C1E934')
TAIPEI_TZ = pytz.timezone('Asia/Taipei')

# --- Helper Functions (‰øùÊåÅ‰∏çËÆä) ---
def get_rain_level(value: float) -> tuple[str, str, str]:
    if value < 0: return "Ë≥áÊñôÁï∞Â∏∏", "rain-red", "Ë≥áÊñôÁï∞Â∏∏"
    if value > 200: return "üü• Ë±™Â§ßÈõ®", "rain-red", "Ë±™Â§ßÈõ®"
    if value > 130: return "üüß Ë±™Èõ®", "rain-orange", "Ë±™Èõ®"
    if value > 80: return "üü® Â§ßÈõ®", "rain-yellow", "Â§ßÈõ®"
    if value > 30: return "üü¶ ‰∏≠Èõ®", "rain-blue", "‰∏≠Èõ®"
    if value > 0: return "üü© Â∞èÈõ®", "rain-green", "Â∞èÈõ®"
    return "‚¨úÔ∏è ÁÑ°Èõ®", "rain-none", "ÁÑ°Èõ®"

# --- API Ë∑ØÁî±ÂÆöÁæ© (‰øùÊåÅ‰∏çËÆä) ---
@app.get("/api/dashboard-data")
async def get_dashboard_data() -> Dict[str, Any]:
    current_time = datetime.now(TAIPEI_TZ).strftime("%Y-%m-%d %H:%M:%S")

    rain_info = await get_cwa_rain_data()
    earthquake_info = await get_cwa_earthquake_data()
    typhoon_info = await get_cwa_typhoon_data()
    road_info = await get_suhua_road_data()

    dashboard_data = {
        "lastUpdate": current_time,
        "rainInfo": rain_info,
        "earthquakeInfo": earthquake_info,
        "roadInfo": road_info,
        "typhoonInfo": typhoon_info
    }
    return dashboard_data

# --- ÂÖ∂‰ªñË≥áÊñôÁç≤ÂèñÂáΩÂºè (ÁÇ∫Ê±ÇÁ∞°ÊΩîÁúÅÁï•Ôºå‰øùÊåÅ‰∏çËÆä) ---
@app.get("/api/radar-image")
async def get_radar_image():
    image_url = "https://www.cwa.gov.tw/Data/radar/CV1_3600.png"
    try:
        response = requests.get(image_url, timeout=10, verify=False)
        response.raise_for_status()
        return Response(content=response.content, media_type="image/png")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching radar image: {e}")
        return Response(status_code=404)

@app.get("/api/rainfall-map")
async def get_rainfall_map():
    image_url = "https://c1.1968services.tw/map-data/O-A0040-002.jpg"
    try:
        response = requests.get(image_url, timeout=10, verify=False)
        response.raise_for_status()
        return Response(content=response.content, media_type="image/jpeg")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching rainfall map: {e}")
        return Response(status_code=404)
        
async def get_cwa_rain_forecast():
    location_names = "ËòáÊæ≥ÈéÆ,ÂçóÊæ≥ÈÑâ,ÁßÄÊûóÈÑâ,Êñ∞ÂüéÈÑâ"
    url = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-D0047-091?Authorization={CWA_API_KEY}&locationName={location_names}&elementName=PoP6h"
    forecasts = {}
    try:
        response = requests.get(url, verify=False, timeout=15)
        response.raise_for_status()
        data = response.json()
        locations = data.get("records", {}).get("location", [])
        for loc in locations:
            loc_name = loc.get("locationName")
            weather_elements = loc.get("weatherElement", [])
            pop6h = next((el for el in weather_elements if el.get("elementName") == "PoP6h"), None)
            if pop6h and pop6h.get("time"):
                first_forecast_pop = int(pop6h["time"][0]["parameter"]["parameterValue"])
                if first_forecast_pop <= 10:
                    forecasts[loc_name] = "ÁÑ°ÊòéÈ°ØÈôçÈõ®"
                else:
                    forecasts[loc_name] = f"{first_forecast_pop}% Ê©üÁéáÈôçÈõ®"
            else:
                forecasts[loc_name] = "È†êÂ†±Ë≥áÊñôÁï∞Â∏∏"
    except requests.exceptions.RequestException as e:
        print(f"Error fetching rain forecast: {e}")
        for name in location_names.split(","):
            forecasts[name] = "È†êÂ†±ËÆÄÂèñÂ§±Êïó"
    return forecasts

async def get_cwa_rain_data():
    station_ids = {"C0O920": "ËòáÊæ≥ÈéÆ", "C0U9N0": "ÂçóÊæ≥ÈÑâ", "C0Z030": "ÁßÄÊûóÈÑâ", "C0T8A0":"Êñ∞ÂüéÈÑâ"}
    forecast_data = await get_cwa_rain_forecast()
    url = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/O-A0002-001?Authorization={CWA_API_KEY}&stationId={','.join(station_ids.keys())}"
    processed_data = []
    try:
        response = requests.get(url, verify=False, timeout=15)
        response.raise_for_status()
        data = response.json()
        stations_data = {station["stationId"]: station for station in data.get("records", {}).get("location", [])}
        for station_id, station_name in station_ids.items():
            station = stations_data.get(station_id)
            if station:
                rain_value_str = next((item["elementValue"] for item in station["weatherElement"] if item["elementName"] == "HOUR_24"), "0")
                rain_value = float(rain_value_str)
                obs_time = datetime.fromisoformat(station["time"]["obsTime"]).astimezone(TAIPEI_TZ).strftime("%H:%M")
                level_text, css_class, _ = get_rain_level(rain_value)
                processed_data.append({
                    "location": station_name, "mm": rain_value, "class": css_class,
                    "level": level_text, "time": obs_time,
                    "forecast": forecast_data.get(station_name, "È†êÂ†±ËÆÄÂèñÂ§±Êïó")
                })
            else:
                processed_data.append({ "location": station_name, "mm": "N/A", "class": "rain-nodata", "level": "Ê∏¨Á´ôÊö´ÁÑ°ÂõûÂ†±", "time": "", "forecast": forecast_data.get(station_name, "N/A") })
    except requests.exceptions.RequestException as e:
        print(f"Error fetching rain data: {e}")
        for station_name in station_ids.values():
            processed_data.append({"location": station_name, "mm": "N/A", "class": "rain-error", "level": "ËÆÄÂèñÂ§±Êïó", "time": "", "forecast": "N/A"})
    return processed_data

async def get_cwa_earthquake_data():
    url = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/E-A0015-001?Authorization={CWA_API_KEY}&limit=30"
    processed_data = []
    try:
        response = requests.get(url, verify=False, timeout=15)
        response.raise_for_status()
        data = response.json()
        if data.get("records") and data["records"].get("Earthquake"):
            three_days_ago = datetime.now(TAIPEI_TZ) - timedelta(days=3)
            for quake in data["records"]["Earthquake"]:
                earthquake_info = quake.get("EarthquakeInfo", {})
                quake_time_str = earthquake_info.get("OriginTime")
                if not quake_time_str: continue
                quake_time = datetime.fromisoformat(quake_time_str).astimezone(TAIPEI_TZ)
                if quake_time >= three_days_ago:
                    yilan_level_str = "0"; hualien_level_str = "0"
                    for area in quake.get("Intensity", {}).get("ShakingArea", []):
                        if area.get("AreaDesc") == "ÂÆúËò≠Á∏£": yilan_level_str = area.get("AreaIntensity", "0")
                        if area.get("AreaDesc") == "Ëä±ËìÆÁ∏£": hualien_level_str = area.get("AreaIntensity", "0")
                    try:
                        yilan_level_int = int(yilan_level_str.replace("Á¥ö", "")); hualien_level_int = int(hualien_level_str.replace("Á¥ö", ""))
                    except ValueError:
                        yilan_level_int = 0; hualien_level_int = 0
                    if yilan_level_int >= 2 or hualien_level_int >= 2:
                        epicenter = earthquake_info.get("Epicenter", {})
                        magnitude_info = earthquake_info.get("Magnitude", {})
                        magnitude_value = magnitude_info.get("MagnitudeValue", 0)
                        report_content = quake.get("ReportContent", "")
                        report_time_str = ""
                        if isinstance(report_content, dict): report_time_str = report_content.get("web", "")
                        report_time = datetime.fromisoformat(report_time_str).astimezone(TAIPEI_TZ).strftime("%H:%M") if report_time_str else ""
                        processed_data.append({
                            "time": quake_time.strftime("%Y-%m-%d %H:%M"), "location": epicenter.get("Location", "‰∏çÊòé"),
                            "magnitude": magnitude_value, "depth": earthquake_info.get("FocalDepth", 0),
                            "hualien_level": str(hualien_level_int), "yilan_level": str(yilan_level_int),
                            "data_time": report_time
                        })
    except requests.exceptions.RequestException as e:
        print(f"Error fetching earthquake data: {e}")
    return processed_data

async def get_cwa_typhoon_data():
    url = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/T-A0001-001?Authorization={CWA_API_KEY}"
    try:
        response = requests.get(url, verify=False, timeout=15)
        response.raise_for_status()
        data = response.json()
        if data.get("records") and data["records"].get("sea_typhoon_warning"):
            typhoon_warnings = data["records"]["sea_typhoon_warning"].get("typhoon_warning_summary",{}).get("SeaTyphoonWarning")
            if typhoon_warnings:
                typhoon = typhoon_warnings[0]
                update_time = datetime.fromisoformat(typhoon["issue_time"]).astimezone(TAIPEI_TZ).strftime("%H:%M")
                return {
                    "name": typhoon["typhoon_name"], "warning_type": typhoon["warning_type"],
                    "update_time": update_time, "location": typhoon["center_location"],
                    "wind_speed": typhoon["max_wind_speed"], "status": typhoon["warning_summary"]["content"],
                    "img_url": "https://www.cwa.gov.tw/Data/typhoon/TY_NEWS/TY_NEWS_0.jpg"
                }
    except requests.exceptions.RequestException as e:
        if e.response and e.response.status_code == 404:
            pass
        else:
            print(f"Error fetching typhoon data: {e}")
    return None

# ==============================================================================
# ===== ‚ú® ÂÖ®Êñ∞ÔºÅ‰ΩøÁî® TDX API Áç≤ÂèñË∑ØÊ≥ÅË≥áÊñôÁöÑÂáΩÂºè (ÊúÄÁµÇ‰øÆÊ≠£Áâà) ‚ú® =====
# ==============================================================================
def get_tdx_access_token():
    """
    Ê≠•È©ü1: Áç≤Âèñ TDX ÁöÑ Access Token
    """
    auth_url = "https://tdx.transportdata.tw/auth/realms/TDXConnect/protocol/openid-connect/token"
    
    # „ÄêÊú¨Ê¨°‰øÆÊ≠£ÈáçÈªû„ÄëÈÄôË£°Ë¶Å‰ΩøÁî®ÊÇ®Âú®Á®ãÂºèÊúÄ‰∏äÊñπÂÆöÁæ©Â•ΩÁöÑ„ÄåËÆäÊï∏„Äç
    # ËÄå‰∏çÊòØÁõ¥Êé•Ë≤º‰∏äÊ≤íÊúâÈõôÂºïËôüÁöÑÊñáÂ≠ó
    body = {
        "grant_type": "client_credentials",
        "client_id": TDX_APP_ID,
        "client_secret": TDX_APP_KEY,
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    try:
        response = requests.post(auth_url, data=body, headers=headers)
        response.raise_for_status()
        token_data = response.json()
        print("‚úÖ ÊàêÂäüÁç≤Âèñ TDX Access TokenÔºÅ")
        return token_data.get("access_token")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Áç≤Âèñ TDX Access Token Â§±Êïó: {e}")
        if e.response:
            print(f"    ‰º∫ÊúçÂô®ÂõûÊáâÈåØË™§: {e.response.text}")
        return None

async def get_suhua_road_data() -> Dict[str, List[Dict[str, Any]]]:
    """
    Ê≠•È©ü2: ‰ΩøÁî® Access Token Áç≤ÂèñËòáËä±ÂÖ¨Ë∑ØË∑ØÊ≥ÅÔºå‰∏¶ÈÄ≤Ë°åÂàÜÈ°û
    """
    sections = {
        "ËòáÊæ≥-ÂçóÊæ≥": ["ËòáÊæ≥", "Êù±Êæ≥", "ËòáÊæ≥ÈößÈÅì", "Êù±Êæ≥ÈößÈÅì", "Êù±Â≤≥ÈößÈÅì"],
        "ÂçóÊæ≥-ÂíåÂπ≥": ["ÂçóÊæ≥", "Ê≠¶Â°î", "Êº¢Êú¨", "ÂíåÂπ≥", "ËßÄÈü≥ÈößÈÅì", "Ë∞∑È¢®ÈößÈÅì"],
        "ÂíåÂπ≥-ÁßÄÊûó": ["ÂíåÂπ≥", "Âíå‰ªÅ", "Â¥áÂæ∑", "ÁßÄÊûó", "ÂíåÂπ≥ÈößÈÅì", "Âíå‰∏≠ÈößÈÅì", "Âíå‰∏≠Ê©ã", "‰ªÅÊ∞¥ÈößÈÅì", "Â§ßÊ∏ÖÊ∞¥ÈößÈÅì", "Èå¶ÊñáÈößÈÅì", "ÂåØÂæ∑ÈößÈÅì", "Â¥áÂæ∑ÈößÈÅì", "Ê∏ÖÊ∞¥Êñ∑Â¥ñ", "‰∏ãÊ∏ÖÊ∞¥Ê©ã", "Â§ßÊ∏ÖÊ∞¥"]
    }
    high_risk_keywords = ["Â∞ÅÈñâ", "‰∏≠Êñ∑", "ÂùçÊñπ"]
    downgrade_keywords = ["ÊîπÈÅì", "Êõø‰ª£ÈÅìË∑Ø", "Ë°åÈßõÂè∞9‰∏ÅÁ∑ö", "ÂñÆÁ∑öÈõôÂêë", "ÊàíË≠∑ÈÄöË°å", "ÊîæË°å"]
    mid_risk_keywords = ["ËêΩÁü≥", "ÊñΩÂ∑•", "ÁÆ°Âà∂", "‰∫ãÊïÖ", "Â£ÖÂ°û", "ËªäÂ§ö", "ÊøÉÈúß", "‰ΩúÊ•≠"]
    degree_keywords = ["ÂñÆÁ∑ö", "ÂñÆÂÅ¥", "ËªäÈÅì", "ÈùûÂÖ®Ë∑ØÂπÖ", "ÊÖ¢ËªäÈÅì", "Ê©üÂãï"]
    
    results = {name: [] for name in sections.keys()}
    
    access_token = get_tdx_access_token()
    
    if not access_token:
        error_event = { "section": "ÂÖ®Á∑ö", "status": "Ë™çË≠âÂ§±Êïó", "class": "road-red", "desc": "ÁÑ°Ê≥ïÁç≤ÂèñTDXÊéàÊ¨ä", "time": "", "is_old_road": False, "detail_url": "" }
        for section_name in sections.keys():
            results[section_name].append(error_event)
        return results

    road_event_url = "https://tdx.transportdata.tw/api/basic/v2/Road/Traffic/Incident/Road/Provincial?$filter=RoadName eq 'Âè∞9Á∑ö' or RoadName eq 'Âè∞9‰∏ÅÁ∑ö'&$orderby=UpdateTime desc&$top=50&$format=JSON"
    
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    try:
        response = requests.get(road_event_url, headers=headers, timeout=15)
        response.raise_for_status()
        
        data = response.json()
        incidents = data.get("Incidents", [])
        
        print(f"‚úÖ ÊàêÂäüÂæû TDX API Áç≤Âèñ {len(incidents)} ÂâáË∑ØÊ≥Å‰∫ã‰ª∂„ÄÇ")

        for incident in incidents:
            content = incident.get("IncidentText", "")
            if not content:
                continue

            report_time = ""
            update_time_str = incident.get("UpdateTime")
            if update_time_str:
                try:
                    utc_time = datetime.fromisoformat(update_time_str.replace('Z', '+00:00'))
                    taipei_time = utc_time.astimezone(TAIPEI_TZ)
                    report_time = f"Êõ¥Êñ∞ÊôÇÈñì: {taipei_time.strftime('%Y-%m-%d %H:%M')}"
                except (ValueError, TypeError):
                    pass

            status = "‰∫ã‰ª∂"; css_class = "road-yellow"; is_high_risk = False
            for keyword in high_risk_keywords:
                if keyword in content:
                    status = keyword; css_class = "road-red"; is_high_risk = True; break
            if not is_high_risk:
                for keyword in mid_risk_keywords:
                    if keyword in content:
                        status = keyword; css_class = "road-yellow"; break
            
            is_partial_closure = any(keyword in content for keyword in degree_keywords)
            has_downgrade_option = any(keyword in content for keyword in downgrade_keywords)
            if is_high_risk:
                if is_partial_closure:
                    status = f"ÁÆ°Âà∂ ({status}ÂñÆÁ∑ö)"; css_class = "road-yellow"
                elif has_downgrade_option:
                    status = f"ÁÆ°Âà∂ ({status}ÊîπÈÅì)"; css_class = "road-yellow"

            road_name = incident.get("RoadName")
            is_old_road_event = (road_name == 'Âè∞9‰∏ÅÁ∑ö') or ("Âè∞9‰∏ÅÁ∑ö" in content)
            
            classified = False
            for section_name, keywords in sections.items():
                if any(keyword in content for keyword in keywords):
                    results[section_name].append({
                        "section": section_name, "status": status, "class": css_class,
                        "desc": f"Ôºà{content}Ôºâ", "time": report_time, "is_old_road": is_old_road_event,
                        "detail_url": "" 
                    })
                    classified = True
                    break
            
            if not classified:
                print(f"    [Êú™ÂàÜÈ°û‰∫ã‰ª∂]: {content}")


    except requests.exceptions.RequestException as e:
        print(f"‚ùå Áç≤Âèñ TDX Ë∑ØÊ≥ÅË≥áÊñôÂ§±Êïó: {e}")
        if e.response:
            print(f"    ‰º∫ÊúçÂô®ÂõûÊáâÈåØË™§: {e.response.text}")
        error_event = { "section": "ÂÖ®Á∑ö", "status": "ËÆÄÂèñÂ§±Êïó", "class": "road-red", "desc": "ÁÑ°Ê≥ïÈÄ£Êé•TDXË∑ØÊ≥Å‰º∫ÊúçÂô®", "time": "", "is_old_road": False, "detail_url": "" }
        for section_name in sections.keys():
            results[section_name].append(error_event)
            
    return results

# --- FastAPI Ê†πË∑ØÁî± (‰øùÊåÅ‰∏çËÆä) ---
@app.get("/")
def read_root():
    return {"status": "Guardian Angel Dashboard FINAL VERSION is running."}

@app.head("/")
def read_root_head():
    return Response(status_code=200)
